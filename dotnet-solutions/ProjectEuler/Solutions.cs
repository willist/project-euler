using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ProjectEuler
{
    /// <summary>
    /// Solutions to various Project Euler problems.
    /// </summary>
    /// <seealso cref="http://projecteuler.net"/>
    public class Solutions
    {
        /// <summary>
        /// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        /// 
        /// Find the sum of all the multiples of 3 or 5 below 1000.
        /// </summary>
        public int Problem001()
        {
            return Enumerable.Range(0, 1000)
                .Where(x => (x % 3 == 0 || x % 5 == 0))
                .Sum();
        }

        /// <summary>
        /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        ///     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        ///
        /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        /// </summary>
        /// <returns></returns>
        public int Problem002()
        {
            return Utilities.Fibonacci()
                .TakeWhile<int>(value => (value < 4000000))
                .Where<int>(value => (value % 2 == 0))
                .Sum();
        }

        /// <summary>
        /// The prime factors of 13195 are 5, 7, 13 and 29.
        ///
        ///What is the largest prime factor of the number 600851475143 ?
        /// </summary>
        /// <returns></returns>
        public long Problem003()
        {
            var number = 600851475143;
            return number.PrimeFactors().Max();
        }

        /// <summary>
        /// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 99.
        ///
        /// Find the largest palindrome made from the product of two 3-digit numbers.
        /// </summary>
        /// <returns></returns>
        public int Problem004()
        {
            Func<Tuple<int, int>, int> product = input => input.Item1 * input.Item2;
            
            return Utilities.CartesianProduct(Enumerable.Range(0, 1000), Enumerable.Range(0, 1000))
                .Select(product)
                .Where(Utilities.Is_Palindrome)
                .Max();
        }

        /// <summary>
        /// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

        /// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
        /// </summary>
        /// <returns></returns>
        public int Problem005()
        {
            return Utilities.NumberGenerator(1)
                .Where(x => 
                    Enumerable.Range(1, 20).All(y => x % y == 0))
                .First();
        }
        
        /// <summary>
        /// The sum of the squares of the first ten natural numbers is,
        /// 1^2 + 2^2 + ... + 10^2 = 385
        /// 
        /// The square of the sum of the first ten natural numbers is,
        /// (1 + 2 + ... + 10)^2 = 55^2 = 3025
        /// 
        /// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025  385 = 2640.
        ///
        /// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
        /// </summary>
        /// <returns></returns>
        public int Problem006()
        {
            var input = 100;
            var sumOfSquares = Enumerable.Range(1, input).Select(x => x * x).Sum();
            var squareOfSum = Convert.ToInt32(Math.Pow(Enumerable.Range(1, input).Sum(), 2));
            return Math.Abs(squareOfSum - sumOfSquares);
        }

        /// <summary>
        /// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
        ///
        /// What is the 10,001st prime number?
        /// </summary>
        /// <returns></returns>
        public int Problem007()
        {
            return Utilities.Primes().Skip(10000).First();
        }
    }
}
