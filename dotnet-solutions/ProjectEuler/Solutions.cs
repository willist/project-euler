using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ProjectEuler
{
    /// <summary>
    /// Solutions to various Project Euler problems.
    /// </summary>
    /// <seealso cref="http://projecteuler.net"/>
    public class Solutions
    {
        /// <summary>
        /// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        /// 
        /// Find the sum of all the multiples of 3 or 5 below 1000.
        /// </summary>
        public int Problem001()
        {
            return Enumerable.Range(0, 1000)
                .Where(x => (x % 3 == 0 || x % 5 == 0))
                .Sum();
        }

        /// <summary>
        /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        ///     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        ///
        /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        /// </summary>
        /// <returns></returns>
        public int Problem002()
        {
            return Utilities.Fibonacci()
                .TakeWhile<int>(value => (value < 4000000))
                .Where<int>(value => (value % 2 == 0))
                .Sum();
        }

        /// <summary>
        /// The prime factors of 13195 are 5, 7, 13 and 29.
        ///
        ///What is the largest prime factor of the number 600851475143 ?
        /// </summary>
        /// <returns></returns>
        public int Problem003()
        {
            var number = 0;
            return number;
        }

        /// <summary>
        /// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 99.
        ///
        /// Find the largest palindrome made from the product of two 3-digit numbers.
        /// </summary>
        /// <returns></returns>
        public int Problem004()
        {
            Func<Tuple<int, int>, int> product = input => input.Item1 * input.Item2;
            
            return Utilities.CartesianProduct(Enumerable.Range(0, 1000), Enumerable.Range(0, 1000))
                .Select(product)
                .Where(Utilities.Is_Palindrome)
                .Max();
        }
    }
}
